@using Microsoft.AspNet.Identity
@model IrasBlog.Models.BlogPost

<!-- Page Header -->
<header class="masthead">
    <div class="overlay"></div>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-md-10 mx-auto">
                <div class="post-heading">
                    <h1>@Model.Title</h1>
                    <h2 class="subheading">@Model.Abstract</h2>
                    <span class="meta">
                        Posted by
                        @Html.ActionLink("Ira Nye", "About", "Home")
                        on @Model.Created.ToString("MMM dd, yyyy")
                    </span>
                </div>
            </div>
        </div>
    </div>
</header>

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-md-10 col-md-offset-2 mx-auto">
                @Html.Raw(Model.BlogPostBody)

                <hr />
                <h1>Comments</h1>
                <hr />
                @foreach (var comment in Model.Comments.OrderBy(c => c.Created))
                {
                    <div class="row">
                        <div class="col-sm-3 comment-metadata">
                            @comment.Author.Email @comment.Created.ToString("M/d/yy")
                        </div>
                        <div class="col-sm-6">
                            <div class="comment">
                                @comment.CommentBody
                            </div>
                        </div>
                        <div class="col-sm-3 comment-admin">
                            <!--Must determine the proper call for the UserId (== comment.AuthorId)-->
                            @if (User.IsInRole("Admin") || User.IsInRole("Moderator") || User.Identity.GetUserId() == comment.AuthorId)
                            {
                                @Html.ActionLink("Edit", "Edit", "Comments", new { Id = comment.Id }, new { @class = "btn btn-sm" })
                                @Html.ActionLink("Delete", "Delete", "Comments", new { Id = comment.Id, slug = comment.BlogPost.Slug }, new { @class = "btn btn-sm confirmDelete" })
                            }
                        </div>
                    </div>
                    <hr />
                }
            <div class="row">
                @if (User.Identity.IsAuthenticated)
                {
                    using (Html.BeginForm("Create", "Comments", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(model => model.Slug)
                        @Html.Hidden("BlogPostId", Model.Id)

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        
                        <div class="form-group">
                            <div class="col-md-10">
                                @Html.TextArea("CommentBody", new {row = 5, cols = 50, placeholder = "Add Comment...", id = "txtComment"})
                            </div>
                        </div>

                        <button class="btn btn-default" type="submit" id="btnSubmit">Comment</button>
                    }
                }
            </div>
                <hr />
                <div class="row">
                    <div class="col-md-offset-3 col-md-8">
                        @if (User.IsInRole("Admin"))
                        {
                            <span class="text-info"><strong>@Html.ActionLink("Edit ", "Edit", new { slug = Model.Slug })</strong></span>
                            <span class="text-info">&nbsp;|&nbsp;</span>
                        }
                        <span class="text-info col-md-3"><strong>@Html.ActionLink("Back to List", "Index", "Home")</strong></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</article>

@section scripts
{
    <script>

        $('#btnSubmit').prop("disabled", true);
        var initVal = $('#txtComment').val();

        $(document).ready(function(){
            $(".masthead").css("background-image", "url(/Images/post-bg.jpg)");
            @if (!String.IsNullOrWhiteSpace(@Model.ImagePath))
            {
                @: $(".masthead").css("background-image", "url(\"@Model.ImagePath\")");
            }
            
            var commentLimit = 500;

            $('#txtComment').keyup(function () {

                // Enable Submit only when a Comment is entered.
                if($('#txtComment').val().length > 0 && $('#txtComment').val() !== initVal) {
                    $('#btnSubmit').prop("disabled", false);
                }else {
                    $('#btnSubmit').prop("disabled", true);
                }

                $(this).val($(this).val().substring(0, commentLimit));
            });

            var defaultDeleteText = "DELETE";
            $(".confirmDelete").click(function (e) {
                var actionVal = $(this).text();
                if (actionVal.toUpperCase() === defaultDeleteText) {
                    e.preventDefault();
                    $(this).text("Confirm Delete?");
                }
            });
            $(".confirmDelete").blur(function () {
                $(this).text(defaultDeleteText);
            });
        });
    </script>
}
