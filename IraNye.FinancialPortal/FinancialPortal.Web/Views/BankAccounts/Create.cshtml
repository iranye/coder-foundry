@model FinancialPortal.Web.Models.BankAccount

@{
    ViewBag.Title = "Create";
}

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Create a Bank Account for your Household <span style="font-size: .6em;">(At least one is Required to Add Transactions)</span></h6>
    </div>
    <div class="card-body">

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.HouseholdId)

            <div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "col-md-12" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.AccountType, htmlAttributes: new { @class = "col-md-12" })
                    <div class="col-md-10">
                        @Html.EnumDropDownListFor(model => model.AccountType, "-- Select Type --", htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.AccountType, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.StartingBalance, htmlAttributes: new { @class = "col-md-12" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.StartingBalance, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.StartingBalance, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CurrentBalance, htmlAttributes: new { @class = "col-md-12" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CurrentBalance, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CurrentBalance, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LowBalanceLevel, htmlAttributes: new { @class = "col-md-12" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.LowBalanceLevel, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LowBalanceLevel, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input id="btnSubmitNewBankAccount" type="submit" value="Create" class="btn btn-primary" />
                    </div>
                </div>
            </div>
        }
    </div> <!-- end card-body -->
</div>

@section scripts
{
    <script>

        $('#btnSubmitNewBankAccount').prop("disabled", true);
        var initName = $('#Name').val();
        var initDescription = $('#Description').val();
        var initStartingBalance = $('#StartingBalance').val();
        var initCurrentBalance = $('#CurrentBalance').val();

        $(document).ready(function () {
            console.log("READY!");

            var strLimit = 100;

            var nameOk = false;
            $('#Name').keyup(function () {
                $(this).val($(this).val().substring(0, strLimit));
                if ($(this).val().length > 0 && $(this).val() !== initName) {
                    nameOk = true;
                } else {
                    nameOk = false;
                }
                checkBtnEnabled();
            });

            var accountTypeOk = false;
            $('#AccountType').change(function () {
                console.log("accountType CHANGE!");
                var selection = $(this).children("option:selected").val();
                console.log(selection);
                accountTypeOk = $.isNumeric(selection) && selection > 0;
                console.log("accountTypeOk: " + accountTypeOk);
                checkBtnEnabled();
            });

            var startingBalanceOk = false;
            $('#StartingBalance').keyup(function () {
                $(this).val($(this).val().substring(0, strLimit));
                console.log("StartingBalance: " + $(this).val());
                if ($(this).val().length > 0 && $(this).val() !== initStartingBalance && isValidDollarAmount($(this).val())) {
                    startingBalanceOk = true;
                    console.log("Starting Bal: " + $(this).val());
                    $('#CurrentBalance').val($(this).val());
                } else {
                    startingBalanceOk = false;
                }
                checkBtnEnabled();
            });

            function checkBtnEnabled() {
                if (nameOk && accountTypeOk && startingBalanceOk) {
                    $('#btnSubmitNewBankAccount').prop("disabled", false);
                } else {
                    $('#btnSubmitNewBankAccount').prop("disabled", true);
                }
            }

            function isValidDollarAmount(floatVal) {
                var pattern = /^\$?([0-9]{1,3},([0-9]{3},)*[0-9]{3}|[0-9]+)(.[0-9][0-9])?$/;
                return pattern.test(floatVal);
            }
        });
    </script>
}