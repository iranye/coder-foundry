@model FinancialPortal.Web.Models.BudgetItem

@{
    ViewBag.Title = "Create Budget Item";
}

<div class="col-lg-6 mb-4">
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Create Budget Item <span style="font-size: .6em;">(At least one is Required to Add Transactions)</span></h6>
        </div>
        <div class="card-body">

            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.BudgetId, "Budget", htmlAttributes: new { @class = "col" })
                        <div class="col-md-10">
                            @Html.DropDownList("BudgetId", null, "-- Select Budget --", htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.BudgetId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "col" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "col" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.TargetAmount, htmlAttributes: new { @class = "col" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.TargetAmount, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.TargetAmount, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-10">
                            <input id="btnSubmitNewBudgetItem" type="submit" value="Create" class="btn btn-primary" />
                        </div>
                    </div>
                </div>
            }

            <div>
                @Html.ActionLink("Back to List", "Dashboard", "Households")
            </div>

        </div> <!-- end card-body -->
    </div>
</div>

@section scripts
{
    <script>

        $('#btnSubmitNewBudgetItem').prop("disabled", true);
        var initName = $('#Name').val();
        var initTargetAmount = $('#TargetAmount').val();
        var initCurrentAmount = $('#CurrentAmount').val();

        $(document).ready(function () {
            console.log("READY!");

            var strLimit = 100;

            var budgetIdOk = false;
            $('#BudgetId').change(function () {
                console.log("budgetId CHANGE!");
                var selection = $(this).children("option:selected").val();
                console.log(selection);
                budgetIdOk = $.isNumeric(selection) && selection > 0;
                console.log("budgetIdOk: " + budgetIdOk);
                checkBtnEnabled();
            });

            var nameOk = false;
            $('#Name').keyup(function () {
                $(this).val($(this).val().substring(0, strLimit));
                if ($(this).val().length > 0 && $(this).val() !== initName) {
                    nameOk = true;
                } else {
                    nameOk = false;
                }
                checkBtnEnabled();
            });

            var targetAmountOk = false;
            $('#TargetAmount').keyup(function () {
                $(this).val($(this).val().substring(0, strLimit));
                console.log("TargetAmount: " + $(this).val());
                if ($(this).val().length > 0 && $(this).val() !== initTargetAmount && isValidDollarAmount($(this).val())) {
                    targetAmountOk = true;
                    $('#CurrentAmount').val($(this).val());
                } else {
                    targetAmountOk = false;
                }
                checkBtnEnabled();
            });

            var currentAmountOk = false;
            $('#CurrentAmount').keyup(function () {
                $(this).val($(this).val().substring(0, strLimit));
                console.log("currentAmount: " + $(this).val());
                if ($(this).val().length > 0 && $(this).val() !== initCurrentAmount && isValidDollarAmount($(this).val())) {
                    currentAmountOk = true;
                    $('#CurrentAmount').val($(this).val());
                } else {
                    currentAmountOk = false;
                }
                checkBtnEnabled();
            });

            function checkBtnEnabled() {
                if (budgetIdOk && nameOk && targetAmountOk) {
                    $('#btnSubmitNewBudgetItem').prop("disabled", false);
                } else {
                    $('#btnSubmitNewBudgetItem').prop("disabled", true);
                }
            }

            function isValidDollarAmount(floatVal) {
                var pattern = /^\$?([0-9]{1,3},([0-9]{3},)*[0-9]{3}|[0-9]+)(.[0-9][0-9])?$/;
                return pattern.test(floatVal);
            }
        });
    </script>
}