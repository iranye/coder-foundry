@model FinancialPortal.Web.Models.Budget

@{
    ViewBag.Title = "Create";
}

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Create Budget <span style="font-size: .6em;">(At least one is Required to Add Transactions)</span></h6>
    </div>
    <div class="card-body">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div>
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.HouseholdId)

                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "col-md-12" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "col-md-12" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TargetAmount, htmlAttributes: new { @class = "col-md-12" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.TargetAmount, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TargetAmount, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CurrentAmount, htmlAttributes: new { @class = "col-md-12" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CurrentAmount, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CurrentAmount, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input id="btnSubmitNewBudget" type="submit" value="Create" class="btn btn-primary" />
                    </div>
                </div>
            </div>
        }
    </div> <!-- end card-body -->
</div>

@section scripts
{
    <script>

        $('#btnSubmitNewBudget').prop("disabled", true);
        var initName = $('#Name').val();
        var initTargetAmount = $('#TargetAmount').val();
        var initCurrentAmount = $('#CurrentAmount').val();

        $(document).ready(function () {
            console.log("READY!");

            var strLimit = 100;

            var nameOk = false;
            $('#Name').keyup(function () {
                $(this).val($(this).val().substring(0, strLimit));
                if ($(this).val().length > 0 && $(this).val() !== initName) {
                    nameOk = true;
                } else {
                    nameOk = false;
                }
                checkBtnEnabled();
            });
            
            $('#Description').keyup(function () {
                $(this).val($(this).val().substring(0, strLimit));
            });

            var targetAmountOk = false;
            $('#TargetAmount').keyup(function () {
                $(this).val($(this).val().substring(0, strLimit));
                console.log("TargetAmount: " + $(this).val());
                if ($(this).val().length > 0 && $(this).val() !== initTargetAmount && isValidDollarAmount($(this).val())) {
                    targetAmountOk = true;
                    $('#CurrentAmount').val($(this).val());
                } else {
                    targetAmountOk = false;
                }
                checkBtnEnabled();
            });

            var currentAmountOk = false;
            $('#CurrentAmount').keyup(function () {
                $(this).val($(this).val().substring(0, strLimit));
                console.log("currentAmount: " + $(this).val());
                if ($(this).val().length > 0 && $(this).val() !== initCurrentAmount && isValidDollarAmount($(this).val())) {
                    currentAmountOk = true;
                    $('#CurrentAmount').val($(this).val());
                } else {
                    currentAmountOk = false;
                }
                checkBtnEnabled();
            });

            function checkBtnEnabled() {
                if (nameOk && targetAmountOk) {
                    $('#btnSubmitNewBudget').prop("disabled", false);
                } else {
                    $('#btnSubmitNewBudget').prop("disabled", true);
                }
            }

            function isValidDollarAmount(floatVal) {
                var pattern = /^\$?([0-9]{1,3},([0-9]{3},)*[0-9]{3}|[0-9]+)(.[0-9][0-9])?$/;
                return pattern.test(floatVal);
            }
        });
    </script>
}